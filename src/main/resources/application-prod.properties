# Production database configuration (using environment variables)
# Consider using a connection pool like HikariCP to manage database connections efficiently. Spring Boot often autoconfigures this
spring.datasource.url=jdbc:sqlserver://${AWS_DATABASE_HOSTNAME}:1433;databaseName=${AWS_DATABASE_DATABASE_NAME};encrypt=false;trustServerCertificate=true
spring.datasource.username=${AWS_DATABASE_USERNAME}
spring.datasource.password=${AWS_DATABASE_PASSWORD}
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
# For automatically creating/updating tables at startup. spring.jpa.hibernate.ddl-auto=create/update/create-drop
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
logging.level.org.hibernate.type.descriptor.sql=trace
#
#
# RabbitMQ
spring.rabbitmq.host=theridebackend.us.aldryn.io




